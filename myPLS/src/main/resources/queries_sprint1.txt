Create database myPLS;
use myPLS;

create table rit_users(
ID int auto_increment Unique key ,
email varchar(100) primary key,
role varchar(50)
);

insert into rit_users (email,role) values ('sk2677@rit.edu','student');
insert into rit_users (email,role) values ('ad5062@rit.edu','student');
insert into rit_users (email,role) values ('av3977@rit.edu','student');
insert into rit_users (email,role) values ('tawvse@rit.edu','professor');

create table user(
name varchar(100),
email varchar(50) primary key references rit_users(email),
authorized boolean,
role varchar(50),
password varchar(50)
);

Alter table user add 
userID int Unique key references rit_users(id);

create table stream(
streamId int primary key auto_increment,
streamName varchar(50) not null,
streamDescription varchar(100),
streamDuration int
);

insert into stream
(streamName,streamDescription,streamDuration)
values
('DS','Data Science',3);

insert into stream
(streamName,streamDescription,streamDuration)
values
('CS','Computer Science',3);

insert into stream
(streamName,streamDescription,streamDuration)
values
('SE','Software Engineering',3);

select * from stream;

create table course(
courseId int primary key auto_increment,
streamId int references Stream(streamId),
courseName varchar(50) not null,
courseDescription varchar(100),
courseDuration int,
professorId int references user(userID)
);

CREATE TABLE groupDiscussion (
    groupDiscussionID int(11) NOT NULL AUTO_INCREMENT,
    userID int(11),
    groupName varchar(255),
    groupTopic varchar(255),
    flag int(11),
    PRIMARY KEY (groupDiscussionID),
	FOREIGN KEY (userID) REFERENCES user(userID)
);

CREATE TABLE groupDiscussionMembers (
    groupDiscussionMembersID int(11) NOT NULL AUTO_INCREMENT,
    userID int(11),
    groupDiscussionID int(11),
    flag int(11),
    PRIMARY KEY (groupDiscussionMembersID),
	FOREIGN KEY (userID) REFERENCES user(userID),
	FOREIGN KEY (groupDiscussionID) REFERENCES groupDiscussion(groupDiscussionID)
);
CREATE TABLE groupDiscussionChat (
    groupDiscussionChatID int(11) NOT NULL AUTO_INCREMENT,
    userID int(11),
    groupDiscussionID int(11),
    messageContent varchar(555),
    flag int(11),
    PRIMARY KEY (groupDiscussionChatID),
	FOREIGN KEY (userID) REFERENCES user(userID),
	FOREIGN KEY (groupDiscussionID) REFERENCES groupDiscussion(groupDiscussionID)
);

 CREATE TABLE courseGroup (
    courseGroupID int(11) NOT NULL AUTO_INCREMENT,
    userID int(11),
    courseID int(11),
    courseName varchar(255),
    courseStream varchar(255),
    flag int(11),
    PRIMARY KEY (courseGroupID),
	FOREIGN KEY (userID) REFERENCES user(userID),
	FOREIGN KEY (courseID) REFERENCES course(courseID)
);

create table preRequisiteCourse(
courseId int references Course(courseId),
preReqCourse int references Course(courseId),
constraint primary key(courseId,preReqCourse)
);

create table learner(
userId int references user(userId),
courseId int references course(courseId),
streamId int references stream(streamId),
constraint primary key(userId,courseId)
);

create table learnerFeedback(
learnerId int references learner(userId),
professorId int references course(professorId),
courseId int references learner(courseId),
rating double not null,
comments varchar(100),
Constraint primary key(learnerId,professorId,courseId)
);

/** To find the preReq of courses **/
select p.courseId,streamId,courseName,preReqCourse 
from preRequisiteCourse p, course c where c.courseId = p.preReqCourse;


select * from rit_users; /* ID */
select * from user; /* userID */
select * from learner; /* learnerID, userID */
select * from groupDiscussionMembers;
truncate table groupDiscussionChat;
ALTER TABLE groupDiscussionChat AUTO_INCREMENT = 1;
select * from groupDiscussionChat;


CREATE TABLE courseGroupChat (
    courseGroupChatID int(11) NOT NULL AUTO_INCREMENT,
    userID int(11),
    courseGroupID int(11),
    messageContent varchar(255),
    userName varchar(255),
    flag int(11),
    PRIMARY KEY (courseGroupChatID),
	FOREIGN KEY (userID) REFERENCES user(userID),
	FOREIGN KEY (courseGroupID) REFERENCES courseGroup(courseGroupID)
);
CREATE TABLE courseGroupMembers (
    courseGroupMembersID int(11) NOT NULL AUTO_INCREMENT,
    userID int(11),
    courseGroupID int(11),
    PRIMARY KEY (courseGroupMembersID),
	FOREIGN KEY (userID) REFERENCES user(userID),
	FOREIGN KEY (courseGroupID) REFERENCES courseGroup(courseGroupID)
);

///////////QUIZ QUERIES
CREATE TABLE `question` (
  `questionID` int NOT NULL AUTO_INCREMENT,
  `problem` varchar(255) DEFAULT NULL,
  `option1` varchar(255) DEFAULT NULL,
  `option2` varchar(255) DEFAULT NULL,
  `option3` varchar(255) DEFAULT NULL,
  `option4` varchar(255) DEFAULT NULL,
  `numberOfCorrectAnswers` int DEFAULT NULL,
  `correctAnswer` varchar(255) DEFAULT NULL,
  `courseID` int DEFAULT NULL,
  `professorID` int DEFAULT NULL,
  PRIMARY KEY (`questionID`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `quiz` (
  `quizID` int NOT NULL AUTO_INCREMENT,
  `quizTime` varchar(255) DEFAULT NULL,
  `userID` int DEFAULT NULL,
  `courseID` int DEFAULT NULL,
  `numberOfQuestions` int DEFAULT NULL,
  `quizTopic` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`quizID`),
  KEY `userID` (`userID`),
  KEY `courseID` (`courseID`),
  CONSTRAINT `quiz_ibfk_1` FOREIGN KEY (`userID`) REFERENCES `user` (`userID`),
  CONSTRAINT `quiz_ibfk_2` FOREIGN KEY (`courseID`) REFERENCES `course` (`courseId`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `quizQuestion` (
  `quizQuestionID` int NOT NULL AUTO_INCREMENT,
  `quizID` int DEFAULT NULL,
  `questionID` int DEFAULT NULL,
  PRIMARY KEY (`quizQuestionID`),
  KEY `quizID` (`quizID`),
  KEY `questionID` (`questionID`),
  CONSTRAINT `quizquestion_ibfk_1` FOREIGN KEY (`quizID`) REFERENCES `quiz` (`quizID`),
  CONSTRAINT `quizquestion_ibfk_2` FOREIGN KEY (`questionID`) REFERENCES `question` (`questionID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
